ExercÃ­cios para Treino
ðŸŸ¢ FÃ¡cil
Crie uma classe Student que tenha os seguintes atributos:

name (nome do estudante)
grade1, grade2, grade3 (trÃªs notas do estudante)
E um mÃ©todo finalGrade() que retorna a soma das trÃªs notas.
Caso a nota final seja menor que 60, exiba "FAILED" e mostre quantos pontos faltam para atingir 60.
Caso contrÃ¡rio, exiba "PASS".
ðŸ“Œ Dica: Use System.out.printf("%.2f", valor) para exibir valores decimais formatados.

ðŸŸ¡ MÃ©dio
Crie um programa para uma locadora de carros.
VocÃª deve ter:

Classe CarRental com:
model (modelo do carro)
rentalDate (data de aluguel)
returnDate (data de devoluÃ§Ã£o)
Classe RentalService com:
pricePerDay (preÃ§o por dia)
pricePerHour (preÃ§o por hora)
invoice(CarRental rental): MÃ©todo que calcula o valor total do aluguel.
Se o aluguel for menor que 12 horas, cobra por hora. Se for maior, cobra por dia.
ðŸ“Œ Dica: Use SimpleDateFormat para manipular datas.

ðŸ”´ DifÃ­cil
Crie um sistema de pedidos para uma loja.

Classe Product com:
name
price
Classe OrderItem com:
quantity
product (associado a um Product)
MÃ©todo subTotal() que calcula quantity * product.price
Enum OrderStatus com:
PENDING_PAYMENT
PROCESSING
SHIPPED
DELIVERED
Classe Order com:
date
status
List<OrderItem>
MÃ©todo total() que calcula o valor total do pedido.
ðŸ“Œ Desafio: PeÃ§a ao usuÃ¡rio para inserir produtos e quantidades, depois exiba o total do pedido.